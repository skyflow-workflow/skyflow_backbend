// Code generated by trpc-go/trpc-cmdline v1.0.9. DO NOT EDIT.
// source: proto/skyflow.proto

package pb

import (
	"context"
	"errors"
	"fmt"

	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "trpc.group/trpc-go/trpc-go"
	"trpc.group/trpc-go/trpc-go/client"
	"trpc.group/trpc-go/trpc-go/codec"
	_ "trpc.group/trpc-go/trpc-go/http"
	"trpc.group/trpc-go/trpc-go/server"
)

// START ======================================= Server Service Definition ======================================= START

// CommonService defines service.
type CommonService interface {
	// Paging Paging 分页格式
	Paging(ctx context.Context, req *PageRequest) (*PageResponse, error)
	// HTTP HTTPReturn  HTTP API接口返回值格式
	HTTP(ctx context.Context, req *emptypb.Empty) (*HTTPResponseMessage, error)
}

func CommonService_Paging_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &PageRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(CommonService).Paging(ctx, reqbody.(*PageRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func CommonService_HTTP_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &emptypb.Empty{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(CommonService).HTTP(ctx, reqbody.(*emptypb.Empty))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// CommonServer_ServiceDesc descriptor for server.RegisterService.
var CommonServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "skyflow.Common",
	HandlerType: ((*CommonService)(nil)),
	Methods: []server.Method{
		{
			Name: "/skyflow.Common/Paging",
			Func: CommonService_Paging_Handler,
		},
		{
			Name: "/skyflow.Common/HTTP",
			Func: CommonService_HTTP_Handler,
		},
	},
}

// RegisterCommonService registers service.
func RegisterCommonService(s server.Service, svr CommonService) {
	if err := s.Register(&CommonServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("Common register error:%v", err))
	}
}

// SkyflowService defines service.
type SkyflowService interface {
	// CreateNamespace CreateNamespace 创建一个命名空间
	CreateNamespace(ctx context.Context, req *CreateNamespaceRequest) (*CreateNamespaceResponse, error)
	// ListNamespaces ListNamespaces 获得命名空间列表
	ListNamespaces(ctx context.Context, req *ListNamespacesRequest) (*ListNamespacesResponse, error)
	// CreateActivity CreateActivity 创建一个活动
	CreateActivity(ctx context.Context, req *CreateActivityRequest) (*CreateActivityResponse, error)
	// ListActivities ListActivities 获得活动列表
	ListActivities(ctx context.Context, req *ListActivitiesRequest) (*ListActivitiesResponse, error)
	// DescribeActivity DescribeActivity 获得一个活动的描述
	DescribeActivity(ctx context.Context, req *DescribeActivityRequest) (*DescribeActivityResponse, error)
}

func SkyflowService_CreateNamespace_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &CreateNamespaceRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(SkyflowService).CreateNamespace(ctx, reqbody.(*CreateNamespaceRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func SkyflowService_ListNamespaces_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &ListNamespacesRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(SkyflowService).ListNamespaces(ctx, reqbody.(*ListNamespacesRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func SkyflowService_CreateActivity_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &CreateActivityRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(SkyflowService).CreateActivity(ctx, reqbody.(*CreateActivityRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func SkyflowService_ListActivities_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &ListActivitiesRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(SkyflowService).ListActivities(ctx, reqbody.(*ListActivitiesRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func SkyflowService_DescribeActivity_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &DescribeActivityRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(SkyflowService).DescribeActivity(ctx, reqbody.(*DescribeActivityRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// SkyflowServer_ServiceDesc descriptor for server.RegisterService.
var SkyflowServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "skyflow.Skyflow",
	HandlerType: ((*SkyflowService)(nil)),
	Methods: []server.Method{
		{
			Name: "/api/v1/CreateNamespace",
			Func: SkyflowService_CreateNamespace_Handler,
		},
		{
			Name: "/api/v1/ListNamespaces",
			Func: SkyflowService_ListNamespaces_Handler,
		},
		{
			Name: "/api/v1/CreateActivity",
			Func: SkyflowService_CreateActivity_Handler,
		},
		{
			Name: "/api/v1/ListActivities",
			Func: SkyflowService_ListActivities_Handler,
		},
		{
			Name: "/api/v1/DescribeActivity",
			Func: SkyflowService_DescribeActivity_Handler,
		},
		{
			Name: "/skyflow.Skyflow/CreateNamespace",
			Func: SkyflowService_CreateNamespace_Handler,
		},
		{
			Name: "/skyflow.Skyflow/ListNamespaces",
			Func: SkyflowService_ListNamespaces_Handler,
		},
		{
			Name: "/skyflow.Skyflow/CreateActivity",
			Func: SkyflowService_CreateActivity_Handler,
		},
		{
			Name: "/skyflow.Skyflow/ListActivities",
			Func: SkyflowService_ListActivities_Handler,
		},
		{
			Name: "/skyflow.Skyflow/DescribeActivity",
			Func: SkyflowService_DescribeActivity_Handler,
		},
	},
}

// RegisterSkyflowService registers service.
func RegisterSkyflowService(s server.Service, svr SkyflowService) {
	if err := s.Register(&SkyflowServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("Skyflow register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedCommon struct{}

// Paging Paging 分页格式
func (s *UnimplementedCommon) Paging(ctx context.Context, req *PageRequest) (*PageResponse, error) {
	return nil, errors.New("rpc Paging of service Common is not implemented")
}

// HTTP HTTPReturn  HTTP API接口返回值格式
func (s *UnimplementedCommon) HTTP(ctx context.Context, req *emptypb.Empty) (*HTTPResponseMessage, error) {
	return nil, errors.New("rpc HTTP of service Common is not implemented")
}

type UnimplementedSkyflow struct{}

// CreateNamespace CreateNamespace 创建一个命名空间
func (s *UnimplementedSkyflow) CreateNamespace(ctx context.Context, req *CreateNamespaceRequest) (*CreateNamespaceResponse, error) {
	return nil, errors.New("rpc CreateNamespace of service Skyflow is not implemented")
}

// ListNamespaces ListNamespaces 获得命名空间列表
func (s *UnimplementedSkyflow) ListNamespaces(ctx context.Context, req *ListNamespacesRequest) (*ListNamespacesResponse, error) {
	return nil, errors.New("rpc ListNamespaces of service Skyflow is not implemented")
}

// CreateActivity CreateActivity 创建一个活动
func (s *UnimplementedSkyflow) CreateActivity(ctx context.Context, req *CreateActivityRequest) (*CreateActivityResponse, error) {
	return nil, errors.New("rpc CreateActivity of service Skyflow is not implemented")
}

// ListActivities ListActivities 获得活动列表
func (s *UnimplementedSkyflow) ListActivities(ctx context.Context, req *ListActivitiesRequest) (*ListActivitiesResponse, error) {
	return nil, errors.New("rpc ListActivities of service Skyflow is not implemented")
}

// DescribeActivity DescribeActivity 获得一个活动的描述
func (s *UnimplementedSkyflow) DescribeActivity(ctx context.Context, req *DescribeActivityRequest) (*DescribeActivityResponse, error) {
	return nil, errors.New("rpc DescribeActivity of service Skyflow is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// CommonClientProxy defines service client proxy
type CommonClientProxy interface {
	// Paging Paging 分页格式
	Paging(ctx context.Context, req *PageRequest, opts ...client.Option) (rsp *PageResponse, err error)
	// HTTP HTTPReturn  HTTP API接口返回值格式
	HTTP(ctx context.Context, req *emptypb.Empty, opts ...client.Option) (rsp *HTTPResponseMessage, err error)
}

type CommonClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewCommonClientProxy = func(opts ...client.Option) CommonClientProxy {
	return &CommonClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *CommonClientProxyImpl) Paging(ctx context.Context, req *PageRequest, opts ...client.Option) (*PageResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/skyflow.Common/Paging")
	msg.WithCalleeServiceName(CommonServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("Common")
	msg.WithCalleeMethod("Paging")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &PageResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *CommonClientProxyImpl) HTTP(ctx context.Context, req *emptypb.Empty, opts ...client.Option) (*HTTPResponseMessage, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/skyflow.Common/HTTP")
	msg.WithCalleeServiceName(CommonServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("Common")
	msg.WithCalleeMethod("HTTP")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &HTTPResponseMessage{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// SkyflowClientProxy defines service client proxy
type SkyflowClientProxy interface {
	// CreateNamespace CreateNamespace 创建一个命名空间
	CreateNamespace(ctx context.Context, req *CreateNamespaceRequest, opts ...client.Option) (rsp *CreateNamespaceResponse, err error)
	// ListNamespaces ListNamespaces 获得命名空间列表
	ListNamespaces(ctx context.Context, req *ListNamespacesRequest, opts ...client.Option) (rsp *ListNamespacesResponse, err error)
	// CreateActivity CreateActivity 创建一个活动
	CreateActivity(ctx context.Context, req *CreateActivityRequest, opts ...client.Option) (rsp *CreateActivityResponse, err error)
	// ListActivities ListActivities 获得活动列表
	ListActivities(ctx context.Context, req *ListActivitiesRequest, opts ...client.Option) (rsp *ListActivitiesResponse, err error)
	// DescribeActivity DescribeActivity 获得一个活动的描述
	DescribeActivity(ctx context.Context, req *DescribeActivityRequest, opts ...client.Option) (rsp *DescribeActivityResponse, err error)
}

type SkyflowClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewSkyflowClientProxy = func(opts ...client.Option) SkyflowClientProxy {
	return &SkyflowClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *SkyflowClientProxyImpl) CreateNamespace(ctx context.Context, req *CreateNamespaceRequest, opts ...client.Option) (*CreateNamespaceResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/api/v1/CreateNamespace")
	msg.WithCalleeServiceName(SkyflowServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("Skyflow")
	msg.WithCalleeMethod("CreateNamespace")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CreateNamespaceResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *SkyflowClientProxyImpl) ListNamespaces(ctx context.Context, req *ListNamespacesRequest, opts ...client.Option) (*ListNamespacesResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/api/v1/ListNamespaces")
	msg.WithCalleeServiceName(SkyflowServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("Skyflow")
	msg.WithCalleeMethod("ListNamespaces")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &ListNamespacesResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *SkyflowClientProxyImpl) CreateActivity(ctx context.Context, req *CreateActivityRequest, opts ...client.Option) (*CreateActivityResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/api/v1/CreateActivity")
	msg.WithCalleeServiceName(SkyflowServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("Skyflow")
	msg.WithCalleeMethod("CreateActivity")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CreateActivityResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *SkyflowClientProxyImpl) ListActivities(ctx context.Context, req *ListActivitiesRequest, opts ...client.Option) (*ListActivitiesResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/api/v1/ListActivities")
	msg.WithCalleeServiceName(SkyflowServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("Skyflow")
	msg.WithCalleeMethod("ListActivities")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &ListActivitiesResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *SkyflowClientProxyImpl) DescribeActivity(ctx context.Context, req *DescribeActivityRequest, opts ...client.Option) (*DescribeActivityResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/api/v1/DescribeActivity")
	msg.WithCalleeServiceName(SkyflowServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("Skyflow")
	msg.WithCalleeMethod("DescribeActivity")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &DescribeActivityResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// END ======================================= Client Service Definition ======================================= END
